proc.u256add_unsafe
    swapw.3
    movup.3
    movup.7
    u32add.unsafe
    movup.4
    movup.7
    u32addc.unsafe
    movup.4
    movup.6
    u32addc.unsafe
    movup.4
    movup.5
    u32addc.unsafe
    movdn.12
    swapw.2
    movup.12
    movup.4
    movup.8
    u32addc.unsafe
    movup.4
    movup.7
    u32addc.unsafe
    movup.4
    movup.6
    u32addc.unsafe
    movup.4
    movup.5
    u32addc.unsafe
    drop
end
proc.u256lt_unsafe
  dup.8
  dup.1
  lt
  movup.9
  movup.2
  eq

  dup.9
  dup.3
  lt
  dup.1
  and
  movup.2
  or
  movup.9
  movup.3
  eq
  movup.2
  dup
  movdn.2
  cdrop

  dup.8
  dup.3
  lt
  dup.1
  and
  movup.2
  or
  movup.8
  movup.3
  eq
  movup.2
  dup
  movdn.2
  cdrop

  dup.7
  dup.3
  lt
  dup.1
  and
  movup.2
  or
  movup.7
  movup.3
  eq
  movup.2
  dup
  movdn.2
  cdrop

  dup.6
  dup.3
  lt
  dup.1
  and
  movup.2
  or
  movup.6
  movup.3
  eq
  movup.2
  dup
  movdn.2
  cdrop

  dup.5
  dup.3
  lt
  dup.1
  and
  movup.2
  or
  movup.5
  movup.3
  eq
  movup.2
  dup
  movdn.2
  cdrop

  dup.4
  dup.3
  lt
  dup.1
  and
  movup.2
  or
  movup.4
  movup.3
  eq
  movup.2
  dup
  movdn.2
  cdrop

  movup.3
  movup.3
  lt
  dup.1
  and
  movup.2
  or
  swap
  drop
end
 
 
# end std lib #
begin
    # Assigning to n #
        # u256 literal: 10 #
        push.10         push.0          push.0          push.0          push.0          push.0          push.0          push.0         

    # Assigning to a #
        # u256 literal: 0 #
        push.0          push.0          push.0          push.0          push.0          push.0          push.0          push.0         

    # Assigning to b #
        # stack would be too large after u256, popping to memory #
            # Moving n to top of stack, 8 values above #
            movupw.3
            movupw.3
            # popping n from top of stack to memory #
            popw.mem.0
            popw.mem.1

        # u256 literal: 1 #
        push.1          push.0          push.0          push.0          push.0          push.0          push.0          push.0         

    # Assigning to c #
        # stack would be too large after u256, popping to memory #
            # Moving a to top of stack, 8 values above #
            movupw.3
            movupw.3
            # popping a from top of stack to memory #
            popw.mem.2
            popw.mem.3

        # u256 literal: 0 #
        push.0          push.0          push.0          push.0          push.0          push.0          push.0          push.0         

    # Assigning to i #
        # stack would be too large after u256, popping to memory #
            # Moving b to top of stack, 8 values above #
            movupw.3
            movupw.3
            # popping b from top of stack to memory #
            popw.mem.4
            popw.mem.5

        # u256 literal: 0 #
        push.0          push.0          push.0          push.0          push.0          push.0          push.0          push.0         

    # -- conditional -- #
    # lt() #
    # stack would be too large after u256, popping to memory #
        # Moving c to top of stack, 8 values above #
        movupw.3
        movupw.3
        # popping c from top of stack to memory #
        popw.mem.6
        popw.mem.7

    # pushing i to the top #
        dupw.1
        dupw.1
    # stack would be too large after u256, popping to memory #
        # Moving i to top of stack, 8 values above #
        movupw.3
        movupw.3
        # popping i from top of stack to memory #
        popw.mem.8
        popw.mem.9

    # push n from memory to top of stack #
    pushw.mem.1
    pushw.mem.0

    exec.u256lt_unsafe
    while.true
        # -- interior block -- #
            # Assigning to c #
                # add() #
                # push a from memory to top of stack #
                pushw.mem.3
                pushw.mem.2

                # push b from memory to top of stack #
                pushw.mem.5
                pushw.mem.4

                exec.u256add_unsafe
            # Assigning to a #
                # push b from memory to top of stack #
                pushw.mem.5
                pushw.mem.4

            # Assigning to b #
                # stack would be too large after u256, popping to memory #
                    # Moving c to top of stack, 8 values above #
                    movupw.3
                    movupw.3
                    # popping c from top of stack to memory #
                    popw.mem.6
                    popw.mem.7

                # push c from memory to top of stack #
                pushw.mem.7
                pushw.mem.6


        # -- after block -- #
            # Assigning to i #
                # add() #
                # stack would be too large after u256, popping to memory #
                    # Moving a to top of stack, 8 values above #
                    movupw.3
                    movupw.3
                    # popping a from top of stack to memory #
                    popw.mem.2
                    popw.mem.3

                # push i from memory to top of stack #
                pushw.mem.9
                pushw.mem.8

                # stack would be too large after u256, popping to memory #
                    # Moving b to top of stack, 8 values above #
                    movupw.3
                    movupw.3
                    # popping b from top of stack to memory #
                    popw.mem.4
                    popw.mem.5

                # u256 literal: 1 #
                push.1          push.0          push.0          push.0          push.0          push.0          push.0          push.0         

                exec.u256add_unsafe

            # cleaning up after branch #
                # push c from memory to top of stack #
                pushw.mem.7
                pushw.mem.6

                # popping c from top of stack to memory #
                popw.mem.6
                popw.mem.7

                # push b from memory to top of stack #
                pushw.mem.5
                pushw.mem.4

                # popping b from top of stack to memory #
                popw.mem.4
                popw.mem.5

                # pushing i to the top #
                    movup.7
                    movup.7
                    movup.7
                    movup.7
                    movup.7
                    movup.7
                    movup.7
                    movup.7
                # popping i from top of stack to memory #
                popw.mem.8
                popw.mem.9

                # push a from memory to top of stack #
                pushw.mem.3
                pushw.mem.2

                # popping a from top of stack to memory #
                popw.mem.2
                popw.mem.3


        # -- conditional -- #
            # lt() #
            # push i from memory to top of stack #
            pushw.mem.9
            pushw.mem.8

            # push n from memory to top of stack #
            pushw.mem.1
            pushw.mem.0

            exec.u256lt_unsafe

    end

    # push b from memory to top of stack #
    pushw.mem.5
    pushw.mem.4

end