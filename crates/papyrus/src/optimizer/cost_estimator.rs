pub struct CostEstimator {
    pub total_cost: u128,
}

impl CostEstimator {
    pub fn new() -> Self {
        CostEstimator { total_cost: 0 }
    }

    pub fn increment(&mut self, operation: MidenOperation) {
        self.total_cost += operation.cost() as u128;
    }
}

pub enum MidenOperation {
    //Field Operations
    Assert,
    AssertEq,
    Add,
    Sub,
    Mul,

    Div,
    Neg,
    Inv,
    CheckedPow2,
    UncheckedPow2,
    NOT,
    AND,
    OR,
    XOR,
    //Comparison Operations
    Eq,
    Neq,
    Lt,
    Lte,
    Gt,
    Gte,
    Eqw,
    //U32 Conversions and tests
    U32Test,
    U32TestW,
    U32Assert,
    U32Assert1,
    U32Assert2,
    U32AssertW,
    U32Cast,
    U32Split,
    //U32 Arithmetic operations
    U32CheckedAdd,
    U32OverflowingAdd,
    U32OverflowingAdd3,
    U32CheckedSuB,
    U32CheckedSubB,
    U32OverflowingSub,
    U32OverflowingSubB,
    U32WrappingSub,
    U32CheckedMul,
    U32WrappingMul,
    U32OverflowingMadd,
    U32CheckedDiv,
    U32UncheckedDiv,
    U32CheckedMod,
    U32UncheckedMod,
    U32CheckedDivMod,
    U32UncheckedDivMod,
    //U32 Bitwise operations
    U32CheckedAND,
    U32CheckedOR,
    U32CheckedXOR,
    U32CheckedNOT,
    U32CheckedShl,
    U32UncheckedShl,
    U32CheckedShr,
    U32UncheckedShr,
    U32CheckedRotl,
    U32UncheckedRotl,
    U32CheckedRotr,
    U32UncheckedRotr,
    //U32 Comparison operations
    U32CheckedEq,
    U32CheckedNeq,
    U32CheckedLt,
    U32UncheckedLt,
    U32CheckedLte,
    U32UncheckedLte,
    U32CheckedGt,
    U32UnCheckedGt,
    U32CheckedGte,
    U32UncheckedGte,
    U32CheckedMin,
    U32UncheckedMin,
    U32CheckedMax,
    U32UncheckedMax,
    //Stack manipulation
    Drop,
    DropW,
    Pad,
    Dup,
    DupW,
    Swap,
    SwapW,
    Movup,
    MovupW,
    Movdn,
    MovdnW,
    CSwap,
    CSwapW,
    CDrop,
    CDropW,
    //Input/Output Operations
    Push,
    PushEnvSdepth,
    PushEnvLocaddr,
    PushAdv,
    LoadWAdv,
    PushMem,
    PushWMem,
    LoadWMem,
    PopMem,
    PopWMem,
    StoreWMem,
    PushLocal,
    PushWLocal,
    LoadWLocal,
    PopLocal,
    PopWlocal,
    StoreWLocal,
    //Cryptographic operations
    Rpperm,
    Rphash,
    MtreeGet,
    MtreeSet,
    MtreeCwm,
}

impl MidenOperation {
    //TODO: we might need to update this to be a larger value, I am not sure what the cost of each op might look like
    pub fn cost(&self) -> u8 {
        match self {
            //Field Operations
            Self::Assert => 0,
            Self::AssertEq => 0,
            Self::Add => 0,
            Self::Sub => 0,
            Self::Mul => 0,
            Self::Div => 0,
            Self::Neg => 0,
            Self::Inv => 0,
            Self::CheckedPow2 => 0,
            Self::UncheckedPow2 => 0,
            Self::NOT => 0,
            Self::AND => 0,
            Self::OR => 0,
            Self::XOR => 0,
            //Comparison Operations
            Self::Eq => 0,
            Self::Neq => 0,
            Self::Lt => 0,
            Self::Lte => 0,
            Self::Gt => 0,
            Self::Gte => 0,
            Self::Eqw => 0,
            //U32 Conversions and tests
            Self::U32Test => 0,
            Self::U32TestW => 0,
            Self::U32Assert => 0,
            Self::U32Assert1 => 0,
            Self::U32Assert2 => 0,
            Self::U32AssertW => 0,
            Self::U32Cast => 0,
            Self::U32Split => 0,
            //U32 Arithmetic operations
            Self::U32CheckedAdd => 0,
            Self::U32OverflowingAdd => 0,
            Self::U32OverflowingAdd3 => 0,
            Self::U32CheckedSuB => 0,
            Self::U32CheckedSubB => 0,
            Self::U32OverflowingSub => 0,
            Self::U32OverflowingSubB => 0,
            Self::U32WrappingSub => 0,
            Self::U32CheckedMul => 0,
            Self::U32WrappingMul => 0,
            Self::U32OverflowingMadd => 0,
            Self::U32CheckedDiv => 0,
            Self::U32UncheckedDiv => 0,
            Self::U32CheckedMod => 0,
            Self::U32UncheckedMod => 0,
            Self::U32CheckedDivMod => 0,
            Self::U32UncheckedDivMod => 0,
            //U32 Bitwise operations
            Self::U32CheckedAND => 0,
            Self::U32CheckedOR => 0,
            Self::U32CheckedXOR => 0,
            Self::U32CheckedNOT => 0,
            Self::U32CheckedShl => 0,
            Self::U32UncheckedShl => 0,
            Self::U32CheckedShr => 0,
            Self::U32UncheckedShr => 0,
            Self::U32CheckedRotl => 0,
            Self::U32UncheckedRotl => 0,
            Self::U32CheckedRotr => 0,
            Self::U32UncheckedRotr => 0,
            //U32 Comparison operations
            Self::U32CheckedEq => 0,
            Self::U32CheckedNeq => 0,
            Self::U32CheckedLt => 0,
            Self::U32UncheckedLt => 0,
            Self::U32CheckedLte => 0,
            Self::U32UncheckedLte => 0,
            Self::U32CheckedGt => 0,
            Self::U32UnCheckedGt => 0,
            Self::U32CheckedGte => 0,
            Self::U32UncheckedGte => 0,
            Self::U32CheckedMin => 0,
            Self::U32UncheckedMin => 0,
            Self::U32CheckedMax => 0,
            Self::U32UncheckedMax => 0,
            //Stack manipulation
            Self::Drop => 0,
            Self::DropW => 0,
            Self::Pad => 0,
            Self::Dup => 0,
            Self::DupW => 0,
            Self::Swap => 0,
            Self::SwapW => 0,
            Self::Movup => 0,
            Self::MovupW => 0,
            Self::Movdn => 0,
            Self::MovdnW => 0,
            Self::CSwap => 0,
            Self::CSwapW => 0,
            Self::CDrop => 0,
            Self::CDropW => 0,
            //Input/Output Operations
            Self::Push => 0,
            Self::PushEnvSdepth => 0,
            Self::PushEnvLocaddr => 0,
            Self::PushAdv => 0,
            Self::LoadWAdv => 0,
            Self::PushMem => 0,
            Self::PushWMem => 0,
            Self::LoadWMem => 0,
            Self::PopMem => 0,
            Self::PopWMem => 0,
            Self::StoreWMem => 0,
            Self::PushLocal => 0,
            Self::PushWLocal => 0,
            Self::LoadWLocal => 0,
            Self::PopLocal => 0,
            Self::PopWlocal => 0,
            Self::StoreWLocal => 0,
            //Cryptographic operations
            Self::Rpperm => 0,
            Self::Rphash => 0,
            Self::MtreeGet => 0,
            Self::MtreeSet => 0,
            Self::MtreeCwm => 0,
        }
    }
}
